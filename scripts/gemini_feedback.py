import google.generativeai as genai
import os
from typing import Dict, Optional

# Configuration Gemini
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

def generate_feedback(activity_type: str, observations: str, metrics: Optional[Dict] = None) -> str:
    """
    G√©n√®re un feedback personnalis√© avec Gemini
    
    Args:
        activity_type (str): Type d'activit√© analys√©e
        observations (str): Observations techniques de l'analyse
        metrics (dict): M√©triques d√©taill√©es (optionnel)
    
    Returns:
        str: Feedback format√© pour l'utilisateur
    """
    
    # Pr√©parer les m√©triques si disponibles
    metrics_text = ""
    if metrics and not metrics.get('error', False):
        metrics_text = f"""
        
üìä **M√©triques mesur√©es :**
- Score global : {metrics.get('overall_score', 0):.1f}/100
- √âquilibre : {metrics.get('avg_balance', 0):.1f}/100
- Sym√©trie : {metrics.get('avg_symmetry', 0):.1f}/100
- Posture : {metrics.get('avg_posture', 0):.1f}/100
- Stabilit√© : {metrics.get('balance_stability', 0):.1f}/100
        """
    
    # Adapter le prompt selon l'activit√©
    activity_context = {
        "basketball": "tir au basketball, focus sur l'alignement du bras, l'√©quilibre des jambes et le suivi du geste",
        "golf": "swing de golf, analyse de la rotation du tronc, transfert de poids et tempo",
        "yoga": "posture de yoga, √©valuation de l'alignement, stabilit√© et respiration",
        "squat": "exercice de squat, v√©rification de la profondeur, alignement genoux/hanches",
        "√©quilibre": "test d'√©quilibre, mesure de la stabilit√© posturale et contr√¥le moteur",
        "autre": "mouvement g√©n√©ral, analyse biom√©canique globale"
    }
    
    context = activity_context.get(activity_type, activity_context["autre"])
    
    prompt = f"""
Tu es un coach sportif expert en biom√©canique. Analyse cette activit√© de **{activity_type}** ({context}).

**Observations automatiques d√©tect√©es :**
{observations}

{metrics_text}

**Consigne :** R√©dige un feedback **constructif et motivant** de 300 mots maximum, structur√© ainsi :

## üéØ Vue d'ensemble
R√©sume rapidement ce qui a √©t√© observ√© dans le mouvement.

## ‚úÖ Points positifs  
Liste ce qui est bien fait (m√™me si imparfait, trouve du positif !).

## ‚ö†Ô∏è Axes d'am√©lioration
Identifie 2-3 points techniques pr√©cis √† corriger, avec l'impact sur la performance.

## üèãÔ∏è Conseils pratiques
Donne 2-3 exercices ou corrections simples √† appliquer imm√©diatement.

**Ton :** Bienveillant, technique mais accessible, motivant. Utilise des emojis pour structurer.
"""

    try:
        # Configuration du mod√®le
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # G√©n√©ration avec param√®tres optimis√©s
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.7,
                max_output_tokens=400,
                top_p=0.8,
            )
        )
        
        return response.text
        
    except Exception as e:
        print(f"‚ùå Erreur Gemini : {str(e)}")
        
        # Fallback intelligent bas√© sur les m√©triques
        return generate_fallback_feedback(activity_type, observations, metrics)

def generate_fallback_feedback(activity_type: str, observations: str, metrics: Optional[Dict]) -> str:
    """G√©n√®re un feedback de secours bas√© sur les m√©triques"""
    
    if not metrics or metrics.get('error', False):
        return f"""
## üéØ Analyse de votre {activity_type}

**Statut :** Analyse technique en cours

**Observations :** {observations}

## üí° Conseils g√©n√©raux
- Concentrez-vous sur la fluidit√© du mouvement
- Maintenez une posture droite et √©quilibr√©e  
- Respirez de mani√®re contr√¥l√©e pendant l'exercice
- Pratiquez r√©guli√®rement pour am√©liorer la coordination

## üîÑ Prochaines √©tapes
R√©essayez l'analyse avec une vid√©o en meilleure qualit√© pour obtenir un feedback plus d√©taill√© !
"""
    
    # Analyse des scores
    overall = metrics.get('overall_score', 0)
    balance = metrics.get('avg_balance', 0)
    symmetry = metrics.get('avg_symmetry', 0)
    posture = metrics.get('avg_posture', 0)
    
    # Feedback bas√© sur les scores
    feedback = f"""
## üéØ Analyse de votre {activity_type}

**Score global :** {overall:.1f}/100

## ‚úÖ Points positifs
"""
    
    if balance > 70:
        feedback += "- Bon √©quilibre g√©n√©ral maintenu\n"
    if symmetry > 75:
        feedback += "- Sym√©trie corporelle correcte\n"
    if posture > 70:
        feedback += "- Alignement postural satisfaisant\n"
    
    feedback += "\n## ‚ö†Ô∏è Axes d'am√©lioration\n"
    
    if balance < 70:
        feedback += "- Travaillez votre √©quilibre avec des exercices sur une jambe\n"
    if symmetry < 75:
        feedback += "- Am√©liorez la sym√©trie en pratiquant devant un miroir\n"
    if posture < 70:
        feedback += "- Renforcez votre tronc pour une meilleure posture\n"
    
    feedback += f"""
## üèãÔ∏è Conseils pour {activity_type}
- √âchauffez-vous bien avant chaque session
- Concentrez-vous sur la qualit√© plut√¥t que la quantit√©
- Filmez-vous r√©guli√®rement pour suivre vos progr√®s
- Hydratez-vous et r√©cup√©rez bien entre les entra√Ænements
"""
    
    return feedback